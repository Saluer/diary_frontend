import React, { useEffect, useState } from "react";
import {Route, Switch } from "react-router-dom";
import CategoryService from "./CategoryService";

const categoryService = new CategoryService();

/*! –§–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
–î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è id –Ω–∞–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ - id –¥–æ—á–µ—Ä–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –Ω–æ –≤–∏–¥–Ω–æ, —á—Ç–æ –∏—Ö –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–∏–Ω, –ø–æ—Å–∫–æ–ª—å–∫—É –º–Ω–æ–≥–æ –æ–±—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π.
–û–¥–Ω–∞–∫–æ –ø–æ–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ*/

//? –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?
const CategoryForm = () => {
	return (
		<Switch>
			<Route path="/create" component={CategoryCreateForm} />
			<Route path="/category/:id/create" component={CategoryCreateForm} />
			<Route path="/update" component={CategoryUpdateForm} />
			<Route path="/category/:id/update" component={CategoryUpdateForm} />
		</Switch>
	);
};

const CategoryCreateForm = (props) => {
	const [name, setName] = useState("");
	const [upperCategoryName, setUpperCategoryName] =
		useState("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è");
	const [description, setDescription] = useState("");
	const {
		match: { params },
	} = props;
	useEffect(() => {
		if (params && params.id) {
			categoryService.getCategories(params.id).then((c) => {
				console.log(c);
				setUpperCategoryName(c.upper_category.name);
				setName(c.name);
				setDescription(c.description);
			});
		} else params.id = "";
		return () => {
			setName("");
			setDescription("");
			setUpperCategoryName("");
		};
	}, [params]);

	const handleCreate = () => {
		console.log(params.id, name);
		categoryService
			.createCategory(
				{
					category_name: name,
					category_description: description,
				},
				params.id
			)
			.then(() => {
				alert("–°–æ–∑–¥–∞–Ω–æ");
				params.id
					? props.history.push("/category/" + params.id)
					: props.history.push("/");
			})
			.catch(() => {
				alert("There was an error! Please re-check your form.");
			});
	};

	const handleSubmit = (event) => {
		handleCreate();

		event.preventDefault();
	};

	//? –ú–æ–∂–Ω–æ –ª–∏ –∫–∞–∫-—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏? –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–ª–∞—Å—Å–æ–≤—ã–º?
	const handleNameChange = (e) => {
		setName(e.target.value);
	};

	const handleDescriptionChange = (e) => {
		setDescription(e.target.value);
	};

	return (
		<form onSubmit={handleSubmit}>
			<div className="form-group">
				<h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
				<label className="form-label mt-2">–ù–∞–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
				<span className="mx-2 font-italic text-info">{upperCategoryName}</span>
				<br />
				<label className="mt-2">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
				<input
					className="form-control w-25 mb-2"
					type="text"
					value={name}
					onChange={handleNameChange}
				/>
				<label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
				<input
					className="form-control w-50"
					type="text"
					value={description}
					onChange={handleDescriptionChange}
				/>
				<input className="btn btn-primary mt-2" type="submit" value="Submit" />
			</div>
		</form>
	);
};

const CategoryUpdateForm = (props) => {
	const [name, setName] = useState("");
	const [upperCategoryName, setUpperCategoryName] =
		useState("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è");
	const [description, setDescription] = useState("");
	const {
		match: { params },
	} = props;

	useEffect(() => {
		if (params && params.id) {
			console.log(params.id)
			categoryService.getCategory(params.id).then((c) => {
				console.log(c);
				const { data } = c;
				if (c.upper_category_name) setUpperCategoryName(c.upper_category_name);
				setName(data.name);
				setDescription(data.description);
			});
		} else params.id = "";
		return () => {
			setName("");
			setDescription("");
			setUpperCategoryName("");
		};
	}, [params]);

	const handleUpdate = (id) => {
		categoryService
			.updateCategory({
				category_id: id,
				category_name: name,
				category_description: description,
			})
			.then(() => {
				alert("Category updated!");
				params.id
				? props.history.push("/category/" + params.id)
				: props.history.push("/");
			})
			.catch(() => {
				alert("There was an error! Please re-check your form.");
			});
	};

	const handleSubmit = (event) => {
		console.log("üöÄ ~ file: CategoryForm.js ~ line 158 ~ handleSubmit ~ props.id", props.id)
		handleUpdate(params.id);

		event.preventDefault();
	};

	//? –ú–æ–∂–Ω–æ –ª–∏ –∫–∞–∫-—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏? –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–ª–∞—Å—Å–æ–≤—ã–º?
	const handleNameChange = (e) => {
		setName(e.target.value);
	};

	const handleDescriptionChange = (e) => {
		setDescription(e.target.value);
	};

	return (
		<form onSubmit={handleSubmit}>
			<div className="form-group">
				<h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
				<label className="form-label mt-2">–ù–∞–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
				<span className="mx-2 font-italic text-info">{upperCategoryName}</span>
				<br />
				<label className="mt-2">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
				<input
					className="form-control w-25 mb-2"
					type="text"
					value={name}
					onChange={handleNameChange}
				/>
				<label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
				<input
					className="form-control w-50"
					type="text"
					value={description}
					onChange={handleDescriptionChange}
				/>
				<input className="btn btn-primary mt-2" type="submit" value="Submit" />
			</div>
		</form>
	);
};
export default CategoryForm;
